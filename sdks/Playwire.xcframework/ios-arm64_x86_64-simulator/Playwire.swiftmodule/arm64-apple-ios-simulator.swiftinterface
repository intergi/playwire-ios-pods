// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Playwire
import Foundation
import GoogleMobileAds
import Swift
import UIKit
import UserMessagingPlatform
import _Concurrency
@objc @_hasMissingDesignatedInitializers public class PWListenerToken : ObjectiveC.NSObject {
  @objc public func cancel()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PWNotifier : ObjectiveC.NSObject {
  @objc public static let shared: Playwire.PWNotifier
  @objc public class func timestamp() -> Swift.Int
  @objc public func startConsoleLogger()
  @objc public func startConsoleLogger(filter: @escaping (Swift.String, Swift.Bool, [Swift.String : Any]) -> Swift.Bool)
  public typealias PWNotifierFilter = (Swift.String, Swift.Bool, [Swift.String : Any]) -> Swift.Bool
  public typealias PWNotifierAction = (Swift.AnyObject, Swift.String, Swift.Bool, [Swift.String : Any], [Swift.String : Any]) -> Swift.Void
  @objc @discardableResult
  public func addListener(_ listener: Swift.AnyObject, filter: @escaping Playwire.PWNotifier.PWNotifierFilter, action: @escaping Playwire.PWNotifier.PWNotifierAction) -> Playwire.PWListenerToken
  @objc public func notify(event: Swift.String, critical: Swift.Bool, context: [Swift.String : Any]?, data: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PWConfigFileLoader {
  @objc func getConfig() -> Playwire.PWAdUnitStoreConfig
}
@objc @objcMembers public class PWStringConfigFileLoader : ObjectiveC.NSObject, Playwire.PWConfigFileLoader {
  @objc public init(string: Swift.String)
  @objc public func getConfig() -> Playwire.PWAdUnitStoreConfig
  @objc deinit
}
@objc @objcMembers public class PWResourceConfigFileLoader : ObjectiveC.NSObject, Playwire.PWConfigFileLoader {
  @objc public init(resource: Swift.String, withExtension ext: Swift.String)
  @objc public func getConfig() -> Playwire.PWAdUnitStoreConfig
  @objc deinit
}
@objc public protocol PWInterstitialDelegate {
  @objc func interstitialDidReceiveAd(_ ad: Playwire.PWInterstitial)
  @objc func interstitial(_ interstitial: Playwire.PWInterstitial, didFailToReceiveAdWithError error: Swift.String)
  @objc func interstitialDidPresentFullScreenContent(_ interstitial: Playwire.PWInterstitial)
  @objc func interstitialDidDismissFullScreenContent(_ interstitial: Playwire.PWInterstitial)
  @objc func interstitial(_ interstitial: Playwire.PWInterstitial, didFailToPresentFullScreenContentWithError error: Swift.String)
  @objc func interstitialDidRecordImpression(_ ad: Playwire.PWInterstitial)
  @objc func interstitialDidRecordClick(_ ad: Playwire.PWInterstitial)
}
@objc @objcMembers public class PWInterstitial : ObjectiveC.NSObject {
  @objc weak public var delegate: Playwire.PWInterstitialDelegate?
  @objc public init(adUnitName: Swift.String, delegate: Playwire.PWInterstitialDelegate? = nil)
  @objc public func load()
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public func show(fromViewController viewController: UIKit.UIViewController)
  @objc deinit
}
extension Playwire.PWInterstitial : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc dynamic public func adDidPresentFullScreenContent(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func adDidDismissFullScreenContent(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func ad(_ ad: GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: Swift.Error)
  @objc dynamic public func adDidRecordImpression(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func adDidRecordClick(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
}
@objc public protocol PWBannerViewDelegate {
  @objc func bannerViewDidReceiveAd(_ bannerView: Playwire.PWBannerView)
  @objc func bannerView(_ bannerView: Playwire.PWBannerView, didFailToReceiveAdWithError error: Swift.String)
  @objc func bannerViewDidRecordImpression(_ bannerView: Playwire.PWBannerView)
  @objc func bannerViewDidRecordClick(_ bannerView: Playwire.PWBannerView)
  @objc func bannerViewWillPresentScreen(_ bannerView: Playwire.PWBannerView)
  @objc func bannerViewWillDismissScreen(_ bannerView: Playwire.PWBannerView)
  @objc func bannerViewDidDismissScreen(_ bannerView: Playwire.PWBannerView)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PWBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var autoload: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adUnitName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: Playwire.PWBannerViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(adUnitName: Swift.String, delegate: Playwire.PWBannerViewDelegate? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func load()
  @objc @_Concurrency.MainActor(unsafe) public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension Playwire.PWBannerView : GoogleMobileAds.GADBannerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewDidReceiveAd(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerView(_ bannerView: GoogleMobileAds.GADBannerView, didFailToReceiveAdWithError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewDidRecordImpression(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewDidRecordClick(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewWillPresentScreen(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewWillDismissScreen(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bannerViewDidDismissScreen(_ bannerView: GoogleMobileAds.GADBannerView)
}
@objc public protocol PWRewardedDelegate {
  @objc func rewardedDidLoad(_ rewarded: Playwire.PWRewarded)
  @objc func rewarded(_ rewarded: Playwire.PWRewarded, didFailToLoadWithError error: Swift.String)
  @objc func rewardedDidUserEarn(_ rewarded: Playwire.PWRewarded, type: Swift.String, amount: Swift.Double)
  @objc func rewardedDidPresentFullScreenContent(_ rewarded: Playwire.PWRewarded)
  @objc func rewardedDidDismissFullScreenContent(_ rewarded: Playwire.PWRewarded)
  @objc func rewarded(_ rewarded: Playwire.PWRewarded, didFailToPresentFullScreenContentWithError error: Swift.String)
  @objc func rewardedDidRecordImpression(_ ad: Playwire.PWRewarded)
  @objc func rewardedDidRecordClick(_ ad: Playwire.PWRewarded)
}
@objc @objcMembers public class PWRewarded : ObjectiveC.NSObject {
  @objc weak public var delegate: Playwire.PWRewardedDelegate?
  @objc public init(adUnitName: Swift.String, delegate: Playwire.PWRewardedDelegate? = nil)
  @objc public func load()
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public func show(fromViewController viewController: UIKit.UIViewController)
  @objc deinit
}
extension Playwire.PWRewarded : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc dynamic public func adDidPresentFullScreenContent(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func adDidDismissFullScreenContent(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func ad(_ ad: GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: Swift.Error)
  @objc dynamic public func adDidRecordImpression(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
  @objc dynamic public func adDidRecordClick(_ ad: GoogleMobileAds.GADFullScreenPresentingAd)
}
public typealias PWAdBid = [Swift.AnyHashable : Any]
@_hasMissingDesignatedInitializers public class PWAdBidderConfig {
  public var adUnit: Playwire.PWAdUnit
  public var adUnitConfig: Playwire.PWAdUnitConfig
  public var adServerConfig: Playwire.PWAdServerConfig
  public var onSuccess: () -> ()
  public var onFailure: () -> ()
  public var bid: Playwire.PWAdBid?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PWAdBidder : ObjectiveC.NSObject {
  public var config: Playwire.PWAdBidderConfig!
  public var logContext: [Swift.String : Any]? {
    get
    set
  }
  @objc override required dynamic public init()
  open func load()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PWC : ObjectiveC.NSObject {
  @objc public static let Version: Swift.String
  @objc public static let EVT_gamInit: Swift.String
  @objc public static let EVT_gamInit_status: Swift.String
  @objc public static let EVT_ump: Swift.String
  @objc public static let EVT_ump_result: Swift.String
  @objc public static let EVT_CTX_bidding_index: Swift.String
  @objc public static let EVT_CTX_bidding_adUnit: Swift.String
  @objc public static let EVT_biddingStart: Swift.String
  @objc public static let EVT_biddingStart_timestamp: Swift.String
  @objc public static let EVT_biddingEnd: Swift.String
  @objc public static let EVT_biddingEnd_timestamp: Swift.String
  @objc public static let EVT_biddingEnd_duration: Swift.String
  @objc public static let EVT_CTX_adUnit_mode: Swift.String
  @objc public static let EVT_CTX_adUnit_name: Swift.String
  @objc public static let EVT_CTX_adUnit_gadUnitId: Swift.String
  @objc public static let EVT_CTX_requestTimestamp: Swift.String
  @objc public static let EVT_gamRequestSuccess: Swift.String
  @objc public static let EVT_gamRequestSuccess_response: Swift.String
  @objc public static let EVT_gamRequestSuccess_timestamp: Swift.String
  @objc public static let EVT_gamRequestSuccess_duration: Swift.String
  @objc public static let EVT_gamRequestFail: Swift.String
  @objc public static let EVT_gamRequestFail_error: Swift.String
  @objc public static let EVT_gamRequestFail_timestamp: Swift.String
  @objc public static let EVT_gamRequestFail_duration: Swift.String
  @objc public static let EVT_gamImpression: Swift.String
  @objc public static let EVT_gamImpression_timestamp: Swift.String
  @objc public static let EVT_CTX_configType: Swift.String
  @objc public static let EVT_CTX_configType_String: Swift.String
  @objc public static let EVT_CTX_configType_Resource: Swift.String
  @objc public static let EVT_configSuccess: Swift.String
  @objc public static let EVT_configSuccess_config: Swift.String
  @objc public static let EVT_configFail: Swift.String
  @objc public static let EVT_configFail_config: Swift.String
  @objc public static let EVT_configFail_resource: Swift.String
  @objc public static let EVT_bannerInitError: Swift.String
  @objc public static let EVT_bannerInitError_error: Swift.String
  @objc public static let EVT_bannerInitError_error_alreadyInitialized: Swift.String
  @objc public static let EVT_bannerInitError_error_noAdUnitName: Swift.String
  @objc public static let EVT_bannerInitError_error_noAdUnit: Swift.String
  @objc public static let EVT_bannerInitError_error_badAdUnit: Swift.String
  @objc public static let EVT_bannerInitError_error_noSizes: Swift.String
  @objc public static let EVT_bannerLoadError: Swift.String
  @objc public static let EVT_bannerLoadError_error: Swift.String
  @objc public static let EVT_bannerLoadError_error_notPrepared: Swift.String
  @objc public static let EVT_bannerLoadError_error_notInternalRep: Swift.String
  @objc public static let EVT_interstitialInitError: Swift.String
  @objc public static let EVT_interstitialInitError_error: Swift.String
  @objc public static let EVT_interstitialInitError_error_noAdUnit: Swift.String
  @objc public static let EVT_interstitialInitError_error_badAdUnit: Swift.String
  @objc public static let EVT_interstitialLoadError: Swift.String
  @objc public static let EVT_interstitialLoadError_error: Swift.String
  @objc public static let EVT_interstitialLoadError_error_notPrepared: Swift.String
  @objc public static let EVT_interstitialLoadError_error_notLoaded: Swift.String
  @objc public static let EVT_interstitialLoadError_error_notInternalRep: Swift.String
  @objc public static let EVT_rewardedInitError: Swift.String
  @objc public static let EVT_rewardedInitError_error: Swift.String
  @objc public static let EVT_rewardedInitError_error_noAdUnit: Swift.String
  @objc public static let EVT_rewardedInitError_error_badAdUnit: Swift.String
  @objc public static let EVT_rewardedLoadError: Swift.String
  @objc public static let EVT_rewardedLoadError_error: Swift.String
  @objc public static let EVT_rewardedLoadError_error_notPrepared: Swift.String
  @objc public static let EVT_rewardedLoadError_error_notLoaded: Swift.String
  @objc public static let EVT_rewardedLoadError_error_notInternalRep: Swift.String
  @objc public static let EVT_rewardedReward: Swift.String
  @objc public static let EVT_rewardedReward_type: Swift.String
  @objc public static let EVT_rewardedReward_amount: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class PWAdSize : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var width: Swift.Int {
    get
  }
  @objc public var height: Swift.Int {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWAdServerConfig : ObjectiveC.NSObject, Swift.Decodable {
  public enum PWAdServerType : Swift.String, Swift.Hashable, Swift.Decodable {
    case Amazon
    case Prebid
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static let PWAdServerType_Amazon: Swift.String
  @objc public static let PWAdServerType_Prebid: Swift.String
  @objc public var name: Swift.String {
    get
  }
  public var serverType: Playwire.PWAdServerConfig.PWAdServerType {
    get
  }
  @objc public var host: Swift.String? {
    get
  }
  @objc public var account: Swift.String? {
    get
  }
  public var useGeo: Swift.Bool? {
    get
  }
  public var isTest: Swift.Bool? {
    get
  }
  public var timeout: Swift.Int? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PWUMPConfig : ObjectiveC.NSObject, Swift.Decodable {
  public enum PWUMPLocation : Swift.String, Swift.Decodable {
    case Current
    case EEA
    case NotEEA
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static let PWUMPLocation_Current: Swift.String
  @objc public static let PWUMPLocation_EEA: Swift.String
  @objc public static let PWUMPLocation_NotEEA: Swift.String
  public var enabled: Swift.Bool? {
    get
  }
  public var debugReset: Swift.Bool? {
    get
  }
  public var debugLocation: Playwire.PWUMPConfig.PWUMPLocation? {
    get
  }
  @objc public var debugDevices: Swift.Array<Swift.String>? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWAdUnitConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var serverConfig: Swift.String {
    get
  }
  @objc public var adUnitId: Swift.String {
    get
  }
  @objc public var adSizes: Swift.Array<Playwire.PWAdSize>? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PWAppConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var gamAppId: Swift.String? {
    get
  }
  @objc public var storeUrl: Swift.String? {
    get
  }
  public var childProtection: Swift.Bool? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWOMConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var partnerName: Swift.String {
    get
  }
  @objc public var partnerVersion: Swift.String {
    get
  }
  public var apiCode: Swift.Int? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PWAdUnitStoreConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var serverConfigs: Swift.Array<Playwire.PWAdServerConfig>? {
    get
  }
  @objc public var adUnits: Swift.Array<Playwire.PWAdUnit> {
    get
  }
  @objc public var mediators: Swift.Array<Playwire.PWAdMediatorConfig>? {
    get
  }
  @objc public var ump: Playwire.PWUMPConfig? {
    get
  }
  @objc public var app: Playwire.PWAppConfig? {
    get
  }
  @objc public var om: Playwire.PWOMConfig? {
    get
  }
  @objc public var schain: Playwire.PWSchainConfig? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWAdUnit : ObjectiveC.NSObject, Swift.Decodable {
  public enum PWAdBidStrategyType : Swift.String, Swift.Decodable {
    case Priority
    case Combined
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static let PWAdBidStrategyType_Priority: Swift.String
  @objc public static let PWAdBidStrategyType_Combined: Swift.String
  public enum PWAdMode : Swift.String, Swift.Decodable {
    case Banner
    case Interstitial
    case Rewarded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static let PWAdMode_Banner: Swift.String
  @objc public static let PWAdMode_Interstitial: Swift.String
  @objc public static let PWAdMode_Rewarded: Swift.String
  @objc public var name: Swift.String {
    get
  }
  @objc public var adUnitConfigs: Swift.Array<Playwire.PWAdUnitConfig>? {
    get
  }
  public var strategy: Playwire.PWAdUnit.PWAdBidStrategyType? {
    get
  }
  public var mode: Playwire.PWAdUnit.PWAdMode {
    get
  }
  public var autorefreshTime: Swift.Int? {
    get
  }
  @objc public var gadUnitId: Swift.String {
    get
  }
  @objc public var gadSizes: Swift.Array<Playwire.PWAdSize>? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWAdMediatorConfig : ObjectiveC.NSObject, Swift.Decodable {
  public enum PWAdMediatorType : Swift.String, Swift.Decodable {
    case AdColony
    case Vungle
    case Smaato
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static let PWAdMediatorType_AdColony: Swift.String
  @objc public static let PWAdMediatorType_Vungle: Swift.String
  @objc public static let PWAdMediatorType_Smaato: Swift.String
  public var type: Playwire.PWAdMediatorConfig.PWAdMediatorType {
    get
  }
  @objc public var adcolony_appId: Swift.String? {
    get
  }
  @objc public var adcolony_zones: Swift.Array<Swift.String>? {
    get
  }
  public var adcolony_showPrePopup: Swift.Bool? {
    get
  }
  public var adcolony_showPostPopup: Swift.Bool? {
    get
  }
  @objc public var vungle_placements: Swift.Array<Swift.String>? {
    get
  }
  @objc public var vungle_userId: Swift.String? {
    get
  }
  public var vungle_startMuted: Swift.Bool? {
    get
  }
  @objc public var smaato_publisherId: Swift.String? {
    get
  }
  public var smaato_gpsEnabled: Swift.Bool? {
    get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class PWSchainConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public class SchainNodeConfig : ObjectiveC.NSObject, Swift.Decodable {
    public var asi: Swift.String {
      get
    }
    public var sid: Swift.String {
      get
    }
    public var hp: Swift.Int {
      get
    }
    public var dictionary: [Swift.String : Any] {
      get
    }
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
  }
  @objc public var ver: Swift.String {
    get
  }
  @objc public var complete: Swift.Int {
    get
  }
  @objc public var nodes: [Playwire.PWSchainConfig.SchainNodeConfig] {
    get
  }
  @objc public var dictionary: [Swift.String : Any] {
    @objc get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class PWAdMediator : ObjectiveC.NSObject {
  public var config: Playwire.PWAdMediatorConfig?
  @objc override required dynamic public init()
  open func initialize()
  open func enableGDPR()
  open func configure(request: GoogleMobileAds.GADRequest)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PlaywireSDK : ObjectiveC.NSObject {
  @objc public var config: Playwire.PWAdUnitStoreConfig? {
    get
  }
  @objc public static let shared: Playwire.PlaywireSDK
  @objc public var configLoader: Playwire.PWConfigFileLoader
  @objc public func initialize(viewController: UIKit.UIViewController, completionHandler: @escaping () -> Swift.Void)
  @objc public var adUnitsDictionary: [Swift.String : [Swift.String]] {
    @objc get
  }
  public func set(type: Playwire.PWAdBidder.Type, for serverType: Playwire.PWAdServerConfig.PWAdServerType)
  public func get(factoryFor serverType: Playwire.PWAdServerConfig.PWAdServerType) -> Playwire.PWAdBidder.Type?
  public func set(type: Playwire.PWAdMediator.Type, for mediatorType: Playwire.PWAdMediatorConfig.PWAdMediatorType)
  @objc open func configure(request: GoogleMobileAds.GADRequest)
  @objc override dynamic public init()
  @objc deinit
}
extension Playwire.PWAdServerConfig.PWAdServerType : Swift.RawRepresentable {}
extension Playwire.PWUMPConfig.PWUMPLocation : Swift.Equatable {}
extension Playwire.PWUMPConfig.PWUMPLocation : Swift.Hashable {}
extension Playwire.PWUMPConfig.PWUMPLocation : Swift.RawRepresentable {}
extension Playwire.PWAdUnit.PWAdBidStrategyType : Swift.Equatable {}
extension Playwire.PWAdUnit.PWAdBidStrategyType : Swift.Hashable {}
extension Playwire.PWAdUnit.PWAdBidStrategyType : Swift.RawRepresentable {}
extension Playwire.PWAdUnit.PWAdMode : Swift.Equatable {}
extension Playwire.PWAdUnit.PWAdMode : Swift.Hashable {}
extension Playwire.PWAdUnit.PWAdMode : Swift.RawRepresentable {}
extension Playwire.PWAdMediatorConfig.PWAdMediatorType : Swift.Equatable {}
extension Playwire.PWAdMediatorConfig.PWAdMediatorType : Swift.Hashable {}
extension Playwire.PWAdMediatorConfig.PWAdMediatorType : Swift.RawRepresentable {}
